This project showcases the features of MVC5 and Web API 2 of ASP.Net framework

ASP.Net MVC Fundamentals:
	Action Results
	Action Parameters
	Convention-based routing
	Attribute routing
	Razor views

Working with data:
	Code-first Migrations
	Seeding the database
	Overriding conventions of entity framwork (using Data Annotations e.g. Required, StringLength etc.)
	Querying objects (using ApplicationDbContext)
	Eager loading (Include() method in System.Data.Entity namespace)

Building Forms:
	Markup to render mordern and responsive forms (e.g helper methods, bootstrap classes)
	Overriding labels (Display attribute)
	Rendering dropdown lists
	Adding and Updating data using entity framework

Implementing Validations:
	Data Annotations(e.g. Required, StringLength etc.)
	Custom Validation (e.g. DateOfBirthValidationAttribute by inheriting ValidationAttribute class)
	CLient-Side Validation (e.g. jQueryval and default data annotations)
	Anti-forgery token to prevent CSRF attacks using'AntiForgeryToken()' helper method and 'ValidateAntiForgeryToken' attribute

Building Web API: (Use of WebApiConfig.cs)
	Postman Chrome Extension
	Data Transfer Objects (DTOs)
	Auto Mapper (Creating MappingProfile.cs under App_Start and Global.asax.cs)
	IHttpActionResult (Helper methods NotFound(), Ok(), Created(), BadRequest())
	Camel Notation using config.Formatters.JsonFormatter.SerializerSettings in WebApiConfig.cs under App_Start folder

Client-side Development
	Calling an API using jQuery
	Bootbox Plug-in (bootbox.confirm function)
	Optimizing jQuery code (Avoiding assignment of multiple handler functions by providing filter as second argument of 'on' function)
	jQuery DataTables plug-in with Ajax source (It avoids jQuery to parse the HTML table to extract and maintain a list of JSON objects)
	Returning Hierarchical data using Eager loading (Include() method)
	Removing the data from datatables' internal list of data so that modified dataset is shown.(used datatables' row(tr).remove().draw() method)
	Data Table Optimization Tip: When dataset in huge then sorting, pagination and processing should be done on server before sending the data
	Tip: Keep your javascript code for data access  and view rendering logic in seperate files to maintain better separtion of concerns
	Tip: Single Page Applications (SPAs) are faster and smoother as the entire view is generated on client. 
	Tip: You can use Angular/ember/Backbone.js on client and ASP/Net Web API on server side.
	jQuery validation

Authentication and Authorization
	Granting and Restricting Access (Global AuthorizeAttribute filter and Local [Authorize] and [AllowAnonymous] filters)
	Extending ASP.NET Identity Users and Roles based on application functionality
	Seeding users and roles using Migration
	Adding profile data
	HTTPS access only (add RequireHttpsAttribute() in FilterConfig.cs)
	OAuth and social logins - PENDING

Performance Optimization
	Tip: Do not sacrifice the maintainability of your code to premature optimization.
	Tip: Efforts should have observable results that give value
	Data Tier Optimization:
		Eager Loading vs Lazy loading (using virtual keyword on porperty which causes N+1 issue)
		Schema Optimization: Primary Keys, Relationships and Indexes
		Query Optimization: Use Execution Plan in SQL Server, Create a "read" database (Command Query Responsibility Segregation) and Use caching
	Application Tier Optimization
		Output Caching
			Enable Output Caching to cache the entire page on server (using [OutputCache(Duration =50,Location =OutputCacheLocation.Server,VaryByParam ="*")])
			Disable Output Caching by setting Duration = 0, VaryByParam ="*" and NoStore=true
		Data Caching can also be used for chaching data on server (MemoryCache.Default["Key"]=value)
			Tip: async/await improve the scalability of your application(not the performance) provided you are not using single instance of SQL server
			Tip: True scalability is achieved with cloud database like NoSQL,Azure,SQL cluster
		Release build <= You can use them without performance profiling
		Disabling session (<sessionState mode="Off"></sessionState> in Web.config) <= You can use them without performance profiling
	Client Tier Optimization
		Light weight DTOs by avoiding unnecessary properties
		Compress JS and CSS files into bundles to avoid multiple server requests
		Scripts should be towards end of the section to avoid delay in rendering
		Disable Cache option in Chrome developer options to monitor performance
	
Pulgins:
	Glimpse
	Typeahead by Twitter (install-package Twitter.Typeahead)
	toastr
